@using MoodBite.Models.RecipeViewModel;

@model RecipeDetailViewModel

@{
    ViewBag.Title = "Home";

    string a = "active";
    string ia = "inactive";

    Session["HomeActive"] = a;
    Session["UploadActive"] = ia;
    Session["CartActive"] = ia;
    Session["ProfileActive"] = ia;

    var user = Session["user"] as User;
    if (user != null)
    {
        ViewBag.TitleHeader = $"Welcome Back, {user.FirstName} !";

    } else
    {
        ViewBag.TitleHeader = $"Welcome Back";
    }
    ViewBag.TitleSubheader = "Home Page";
    Layout = "~/Views/Shared/_StandardLayout.cshtml";
    string chosenMood = (string)Session["ChosenMood"];
    string iconName = "";
    switch(chosenMood?.ToLower())
    {
        case "happy":
            iconName = "far fa-smile";
            break;
        case "sad":
            iconName = "far fa-sad-tear";
            break;
        case "angry":
            iconName = "far fa-angry";
            break;
        case "disgusted":
            iconName = "far fa-grimace";
            break;
        case "fearful":
            iconName = "far fa-flushed";
            break;
        case "surprised":
            iconName = "far fa-surprise";
            break;
        case "euthymia":
            iconName = "far fa-grin";
            break;
    }
}

<!-- Favicon -->
<link href="~/Content/MainTemplate/img/favicon.ico" rel="icon">

<!-- Google Font -->
<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400|Nunito:600,700" rel="stylesheet">

<!-- CSS Libraries -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
<link href="~/Content/MainTemplate/lib/animate/animate.min.css" rel="stylesheet">
<link href="~/Content/MainTemplate/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
<link href="~/Content/MainTemplate/lib/flaticon/font/flaticon.css" rel="stylesheet">
<link href="~/Content/MainTemplate/lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Wano Quin:wght@900&display=swap" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Blinker:wght@300;400;700&display=swap" />

<!-- Template Stylesheet -->
<link href="~/Content/bootstrap-5.3.3-dist/css/bootstrap.css" rel="stylesheet"/>
<link href="~/Content/MainTemplate/css/style.css" rel="stylesheet">
<form action="~/UsersPage/UsersHome" method="post">

    <div class="search-widget" style="margin:4rem 0 0">
        <input class="form-control" name="search" type="text" placeholder="Search Keyword" value="@Session["SearchInput"]">
        <button type="submit" class="btn" style="right:12.5%;"><i class="fa fa-search"></i></button>
    </div>

    <div>
        <div class="mt-2 allercb" style="margin: 0 7rem;">
            <span class="mr-2"><b>Filter search by Allergies:</b></span>
            <br />
            @foreach (var allergy in Model.allergy)
        {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" style="width:20px;height:20px" type="checkbox" id="@allergy" name="allergyInp[]" value="@allergy">
                    <label class="form-check-label" for="@allergy">@allergy</label>
                </div>
    }
        </div>
        <div class="mt-2 intolcb" style="margin: 0 7rem;">
            <span class="mr-2"><b>Filter search by Intolerance:</b></span>
            <br />
            @foreach (var intolerance in Model.intolerance)
        {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" style="width:20px;height:20px" type="checkbox" id="@intolerance" name="intoleranceInp[]" value="@intolerance">
                    <label class="form-check-label" for="@intolerance">@intolerance</label>
                </div>
        }
        </div>
        <div class="mt-2 foodcatcb" style="margin: 0 7rem;">
            <span class="mr-2"><b>Filter search by Food Category:</b></span>
            <br />
            @foreach (var fc in Model.foodCategories)
        {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" style="width:20px;height:20px" type="checkbox" id="@fc" name="foodCategoryInp[]" value="@fc">
                    <label class="form-check-label" for="@fc">@fc</label>
                </div>
    }
        </div>
    </div>
</form>


<div style="padding-top:2rem">
    <div class="section-header text-center">
        <h2>Check out this New & <br> Fresh Recipes</h2>
        <h6 style="padding:2rem 0;">This makes choosing what to eat easier and more enjoyable. Say goodbye to food stress and hello to a personalized, time-saving, <br> and allergy-friendly food recommendation site.</h6>
    </div>
    <div class="row">
        @if (Model.recommendedRecipes.Count() != 0)
        {
            foreach (var recipe in Model.recommendedRecipes)
            {
                <div class="col-md-4 flex-recipe-container">
                    <div class="blog-item" style="width:100%; display: flex;justify-content: center; align-items: center; flex-direction: column;">
                        <div class="blog-img" style="width:200px; margin:0 auto">
                            @*@{
                                // Default MIME type
                                string mimeType = "image/jpeg";
                                if (recipe.ImagePath != null && recipe.ImageURL.Length > 0)
                                {
                                    // Determine the MIME type based on the first few bytes of the image data
                                    byte[] imageData = recipe.ImageURL;
                                    string firstBytes = System.Text.Encoding.UTF8.GetString(imageData.Take(4).ToArray());

                                    if (firstBytes.StartsWith("GIF8"))
                                    {
                                        mimeType = "image/gif";
                                    }
                                    else if (firstBytes.StartsWith("\xFF\xD8"))
                                    {
                                        mimeType = "image/jpeg";
                                    }
                                    else if (firstBytes.StartsWith("\x89PNG\x0D\x0A\x1A\x0A"))
                                    {
                                        mimeType = "image/png";
                                    }
                                }
                            }*@
                            <img class="recipe-img" src="@Url.Content(recipe.ImagePath)" alt="RecipeImageCover" style="border-radius:50%; animation: spin 60s linear infinite; height:200px" data-animate-on-scroll />
                        </div>
                        <div class="blog-content" onclick="window.location.href='RecipeReadMore/@recipe.RecipeID'" style="background-image: url(../../Content/multimedia/recipecontainer@3x.png); background-repeat:no-repeat; background-size:cover; width:250px; height:250px; background-color:unset; background-position:center; box-shadow:unset; left:0 !important; z-index:0; cursor:pointer">
                            <h2 class="blog-title" style="text-align:center">@recipe.RecipeName</h2>
                            <h6 class="blog-title" style="text-align:center">@recipe.FoodCategoryName</h6>
                            @{
                        string dateUploaded = "";
                        double recipeRating = 0;

                                @*foreach (var recipeDetail in Model.recipeDetailsWithoutIngredients)
                                    {
                                        if (recipeDetail.RecipeID == recipe.RecipeID)
                                        {
                                            dateUploaded = Convert.ToDateTime(recipeDetail.DateUploaded).ToShortDateString();
                                            recipeRating = 0;
                                            foreach (var recipesRating in Model.recipeDetailsWithRating)
                                            {
                                                if (recipesRating.RecipeID == recipeDetail.RecipeID)
                                                {
                                                    recipeRating = Convert.ToDouble(recipesRating.Rating);
                                                    break;
                                                }
                                            }
                                            <div class="blog-meta">
                                                <p><i class="far fa-user"></i>@recipe.Uploaded_by</p>
                                                <p><i class="far fa-calendar-alt"></i>@dateUploaded</p>
                                                <p><i class="far fa-star"></i>(@recipeRating)</p>
                                            </div>
                                            break;
                                        }
                                    }*@
                            }

                            <div class="blog-text recipe-btn userhomerecipebtn" style="display:block">

                                @if (!Model.faveRecipes.Contains(recipe.RecipeID))
                        {
                                    <a style="position:relative; left:100px"><img class="inactive-heart" style="cursor:pointer" src="~/Content/multimedia/favoritesvector.svg" data-recipe-id="@recipe.RecipeID" /></a>
                        }
                        else
                        {
                                    <a style="position:relative; left:100px"><img class="active-heart" style="cursor:pointer" src="~/Content/multimedia/heartactive.svg" data-recipe-id="@recipe.RecipeID" /></a>
                        }

                                <a style="position:relative; left:132.5px"><img style="cursor:pointer" src="~/Content/multimedia/shareicon.svg" /></a>
                            </div>
                        </div>
                    </div> <!--end of blog-item-->
                </div>
        }
    } else
    {
                                    <h3 style="text-align:center"><i>Out of recipes...</i></h3>
    }
    </div>
    </div>

<!-- JavaScript Libraries -->
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.bundle.min.js"></script>
<script src="~/Content/MainTemplate/lib/easing/easing.min.js"></script>
<script src="~/Content/MainTemplate/lib/owlcarousel/owl.carousel.min.js"></script>
<script src="~/Content/MainTemplate/lib/tempusdominus/js/moment.min.js"></script>
<script src="~/Content/MainTemplate/lib/tempusdominus/js/moment-timezone.min.js"></script>
<script src="~/Content/MainTemplate/lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js"></script>

<!-- Contact Javascript File -->
<script src="~/Content/MainTemplate/mail/jqBootstrapValidation.min.js"></script>
<script src="~/Content/MainTemplate/mail/contact.js"></script>

<!-- Template Javascript -->
<script src="~/Content/MainTemplate/js/main.js"></script>
<script src="~/Content/bootstrap-5.3.3-dist/js/bootstrap.js"></script>

<script>
    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }

    var scrollAnimElements = document.querySelectorAll("[data-animate-on-scroll]");
    var observer = new IntersectionObserver(
      (entries) => {
          for (const entry of entries) {
              if (entry.isIntersecting || entry.intersectionRatio > 0) {
                  const targetElement = entry.target;
                  targetElement.classList.add("animate");
                  observer.unobserve(targetElement);
              }
          }
      },
      {
          threshold: 0.15,
      }
    );

    for (let i = 0; i < scrollAnimElements.length; i++) {
        observer.observe(scrollAnimElements[i]);
    }

    $(".recipe-btn img[data-recipe-id]").click(function () {
        // Disable the image to prevent multiple clicks
        $(this).prop("disabled", true);

        var onClickValue = $(this).closest('.blog-content').attr('onclick');

        $(this).closest('.blog-content').removeAttr('onclick');

        var recipeID = parseInt($(this).attr("data-recipe-id"));
        var $image = $(".recipe-btn img[data-recipe-id='" + recipeID + "']");

        var data = {
            recipeID: recipeID
        };

        $.ajax({
            url: "/UsersPage/AddToFavorites",
            type: "POST",
            data: data,
            success: function (response) {
                if (response.success) {
                    if(response.add == true){
                        alert(response.message);
                        $image.removeClass("inactive-heart").addClass("active-heart").attr("src", '@Url.Content("~/Content/multimedia/heartactive.svg")');
                    } else {
                        alert(response.message);
                        $image.removeClass("active-heart").addClass("inactive-heart").attr("src", '@Url.Content("~/Content/multimedia/favoritesvector.svg")');
                    }
                } else {
                    alert(response.message);
                }
            },
            error: function () {
                alert("An error occurred while adding the recipe to favorites.");
            },
            complete: function () {
                $(".recipe-btn img[data-recipe-id]").prop("disabled", false);

                $(".blog-content").attr('onclick', onClickValue);
            }
        });
    });

</script>

